/* automatically generated by rust-bindgen 0.69.2 */

pub type WPI_Handle = ::std::os::raw::c_uint;
pub type WPI_EventHandle = WPI_Handle;
pub type WPI_SemaphoreHandle = WPI_Handle;
extern "C" {
    pub fn WPI_CreateEvent(
        manual_reset: ::std::os::raw::c_int,
        initial_state: ::std::os::raw::c_int,
    ) -> WPI_EventHandle;
}
extern "C" {
    pub fn WPI_DestroyEvent(handle: WPI_EventHandle);
}
extern "C" {
    pub fn WPI_SetEvent(handle: WPI_EventHandle);
}
extern "C" {
    pub fn WPI_ResetEvent(handle: WPI_EventHandle);
}
extern "C" {
    pub fn WPI_CreateSemaphore(
        initial_count: ::std::os::raw::c_int,
        maximum_count: ::std::os::raw::c_int,
    ) -> WPI_SemaphoreHandle;
}
extern "C" {
    pub fn WPI_DestroySemaphore(handle: WPI_SemaphoreHandle);
}
extern "C" {
    pub fn WPI_ReleaseSemaphore(
        handle: WPI_SemaphoreHandle,
        release_count: ::std::os::raw::c_int,
        prev_count: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn WPI_WaitForObject(handle: WPI_Handle) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn WPI_WaitForObjectTimeout(
        handle: WPI_Handle,
        timeout: f64,
        timed_out: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn WPI_WaitForObjects(
        handles: *const WPI_Handle,
        handles_count: ::std::os::raw::c_int,
        signaled: *mut WPI_Handle,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn WPI_WaitForObjectsTimeout(
        handles: *const WPI_Handle,
        handles_count: ::std::os::raw::c_int,
        signaled: *mut WPI_Handle,
        timeout: f64,
        timed_out: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn WPI_CreateSignalObject(
        handle: WPI_Handle,
        manual_reset: ::std::os::raw::c_int,
        initial_state: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn WPI_SetSignalObject(handle: WPI_Handle);
}
extern "C" {
    pub fn WPI_ResetSignalObject(handle: WPI_Handle);
}
extern "C" {
    pub fn WPI_DestroySignalObject(handle: WPI_Handle);
}
extern "C" {
    pub fn WPI_Impl_ShutdownNowRio();
}
extern "C" {
    pub fn WPI_NowDefault() -> u64;
}
extern "C" {
    pub fn WPI_SetNowImpl(func: ::std::option::Option<unsafe extern "C" fn() -> u64>);
}
extern "C" {
    pub fn WPI_Now() -> u64;
}
extern "C" {
    pub fn WPI_GetSystemTime() -> u64;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct WPI_DataLog_String {
    pub str_: *const ::std::os::raw::c_char,
    pub len: usize,
}
#[test]
fn bindgen_test_layout_WPI_DataLog_String() {
    const UNINIT: ::std::mem::MaybeUninit<WPI_DataLog_String> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<WPI_DataLog_String>(),
        8usize,
        concat!("Size of: ", stringify!(WPI_DataLog_String))
    );
    assert_eq!(
        ::std::mem::align_of::<WPI_DataLog_String>(),
        4usize,
        concat!("Alignment of ", stringify!(WPI_DataLog_String))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).str_) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(WPI_DataLog_String),
            "::",
            stringify!(str_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).len) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(WPI_DataLog_String),
            "::",
            stringify!(len)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct WPI_DataLog {
    _unused: [u8; 0],
}
extern "C" {
    pub fn WPI_DataLog_Create(
        dir: *const ::std::os::raw::c_char,
        filename: *const ::std::os::raw::c_char,
        period: f64,
        extraHeader: *const ::std::os::raw::c_char,
    ) -> *mut WPI_DataLog;
}
extern "C" {
    pub fn WPI_DataLog_Create_Func(
        write: ::std::option::Option<
            unsafe extern "C" fn(ptr: *mut ::std::os::raw::c_void, data: *const u8, len: usize),
        >,
        ptr: *mut ::std::os::raw::c_void,
        period: f64,
        extraHeader: *const ::std::os::raw::c_char,
    ) -> *mut WPI_DataLog;
}
extern "C" {
    pub fn WPI_DataLog_Release(datalog: *mut WPI_DataLog);
}
extern "C" {
    pub fn WPI_DataLog_SetFilename(
        datalog: *mut WPI_DataLog,
        filename: *const ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn WPI_DataLog_Flush(datalog: *mut WPI_DataLog);
}
extern "C" {
    pub fn WPI_DataLog_Pause(datalog: *mut WPI_DataLog);
}
extern "C" {
    pub fn WPI_DataLog_Resume(datalog: *mut WPI_DataLog);
}
extern "C" {
    pub fn WPI_DataLog_Stop(datalog: *mut WPI_DataLog);
}
extern "C" {
    pub fn WPI_DataLog_Start(
        datalog: *mut WPI_DataLog,
        name: *const ::std::os::raw::c_char,
        type_: *const ::std::os::raw::c_char,
        metadata: *const ::std::os::raw::c_char,
        timestamp: i64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn WPI_DataLog_Finish(
        datalog: *mut WPI_DataLog,
        entry: ::std::os::raw::c_int,
        timestamp: i64,
    );
}
extern "C" {
    pub fn WPI_DataLog_SetMetadata(
        datalog: *mut WPI_DataLog,
        entry: ::std::os::raw::c_int,
        metadata: *const ::std::os::raw::c_char,
        timestamp: i64,
    );
}
extern "C" {
    pub fn WPI_DataLog_AppendRaw(
        datalog: *mut WPI_DataLog,
        entry: ::std::os::raw::c_int,
        data: *const u8,
        len: usize,
        timestamp: i64,
    );
}
extern "C" {
    pub fn WPI_DataLog_AppendBoolean(
        datalog: *mut WPI_DataLog,
        entry: ::std::os::raw::c_int,
        value: ::std::os::raw::c_int,
        timestamp: i64,
    );
}
extern "C" {
    pub fn WPI_DataLog_AppendInteger(
        datalog: *mut WPI_DataLog,
        entry: ::std::os::raw::c_int,
        value: i64,
        timestamp: i64,
    );
}
extern "C" {
    pub fn WPI_DataLog_AppendFloat(
        datalog: *mut WPI_DataLog,
        entry: ::std::os::raw::c_int,
        value: f32,
        timestamp: i64,
    );
}
extern "C" {
    pub fn WPI_DataLog_AppendDouble(
        datalog: *mut WPI_DataLog,
        entry: ::std::os::raw::c_int,
        value: f64,
        timestamp: i64,
    );
}
extern "C" {
    pub fn WPI_DataLog_AppendString(
        datalog: *mut WPI_DataLog,
        entry: ::std::os::raw::c_int,
        value: *const ::std::os::raw::c_char,
        len: usize,
        timestamp: i64,
    );
}
extern "C" {
    pub fn WPI_DataLog_AppendBooleanArray(
        datalog: *mut WPI_DataLog,
        entry: ::std::os::raw::c_int,
        arr: *const ::std::os::raw::c_int,
        len: usize,
        timestamp: i64,
    );
}
extern "C" {
    pub fn WPI_DataLog_AppendBooleanArrayByte(
        datalog: *mut WPI_DataLog,
        entry: ::std::os::raw::c_int,
        arr: *const u8,
        len: usize,
        timestamp: i64,
    );
}
extern "C" {
    pub fn WPI_DataLog_AppendIntegerArray(
        datalog: *mut WPI_DataLog,
        entry: ::std::os::raw::c_int,
        arr: *const i64,
        len: usize,
        timestamp: i64,
    );
}
extern "C" {
    pub fn WPI_DataLog_AppendFloatArray(
        datalog: *mut WPI_DataLog,
        entry: ::std::os::raw::c_int,
        arr: *const f32,
        len: usize,
        timestamp: i64,
    );
}
extern "C" {
    pub fn WPI_DataLog_AppendDoubleArray(
        datalog: *mut WPI_DataLog,
        entry: ::std::os::raw::c_int,
        arr: *const f64,
        len: usize,
        timestamp: i64,
    );
}
extern "C" {
    pub fn WPI_DataLog_AppendStringArray(
        datalog: *mut WPI_DataLog,
        entry: ::std::os::raw::c_int,
        arr: *const WPI_DataLog_String,
        len: usize,
        timestamp: i64,
    );
}
extern "C" {
    pub fn WPI_DataLog_AddSchemaString(
        datalog: *mut WPI_DataLog,
        name: *const ::std::os::raw::c_char,
        type_: *const ::std::os::raw::c_char,
        schema: *const ::std::os::raw::c_char,
        timestamp: i64,
    );
}
extern "C" {
    pub fn WPI_DataLog_AddSchema(
        datalog: *mut WPI_DataLog,
        name: *const ::std::os::raw::c_char,
        type_: *const ::std::os::raw::c_char,
        schema: *const u8,
        schema_len: usize,
        timestamp: i64,
    );
}
