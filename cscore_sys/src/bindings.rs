/* automatically generated by rust-bindgen 0.69.2 */

pub const WPI_PixelFormat_WPI_PIXFMT_UNKNOWN: WPI_PixelFormat = 0;
pub const WPI_PixelFormat_WPI_PIXFMT_MJPEG: WPI_PixelFormat = 1;
pub const WPI_PixelFormat_WPI_PIXFMT_YUYV: WPI_PixelFormat = 2;
pub const WPI_PixelFormat_WPI_PIXFMT_RGB565: WPI_PixelFormat = 3;
pub const WPI_PixelFormat_WPI_PIXFMT_BGR: WPI_PixelFormat = 4;
pub const WPI_PixelFormat_WPI_PIXFMT_GRAY: WPI_PixelFormat = 5;
pub const WPI_PixelFormat_WPI_PIXFMT_Y16: WPI_PixelFormat = 6;
pub const WPI_PixelFormat_WPI_PIXFMT_UYVY: WPI_PixelFormat = 7;
pub type WPI_PixelFormat = ::std::os::raw::c_uint;
#[doc = " @defgroup cscore_typedefs Typedefs\n @{"]
pub type CS_Bool = ::std::os::raw::c_int;
pub type CS_Status = ::std::os::raw::c_int;
pub type CS_Handle = ::std::os::raw::c_int;
pub type CS_Property = CS_Handle;
pub type CS_Listener = CS_Handle;
pub type CS_ListenerPoller = CS_Handle;
pub type CS_Sink = CS_Handle;
pub type CS_Source = CS_Handle;
pub const CS_StatusValue_CS_PROPERTY_WRITE_FAILED: CS_StatusValue = 2000;
pub const CS_StatusValue_CS_OK: CS_StatusValue = 0;
pub const CS_StatusValue_CS_INVALID_HANDLE: CS_StatusValue = -2000;
pub const CS_StatusValue_CS_WRONG_HANDLE_SUBTYPE: CS_StatusValue = -2001;
pub const CS_StatusValue_CS_INVALID_PROPERTY: CS_StatusValue = -2002;
pub const CS_StatusValue_CS_WRONG_PROPERTY_TYPE: CS_StatusValue = -2003;
pub const CS_StatusValue_CS_READ_FAILED: CS_StatusValue = -2004;
pub const CS_StatusValue_CS_SOURCE_IS_DISCONNECTED: CS_StatusValue = -2005;
pub const CS_StatusValue_CS_EMPTY_VALUE: CS_StatusValue = -2006;
pub const CS_StatusValue_CS_BAD_URL: CS_StatusValue = -2007;
pub const CS_StatusValue_CS_TELEMETRY_NOT_ENABLED: CS_StatusValue = -2008;
pub const CS_StatusValue_CS_UNSUPPORTED_MODE: CS_StatusValue = -2009;
#[doc = " Status values"]
pub type CS_StatusValue = ::std::os::raw::c_int;
pub const CS_LogLevel_CS_LOG_CRITICAL: CS_LogLevel = 50;
pub const CS_LogLevel_CS_LOG_ERROR: CS_LogLevel = 40;
pub const CS_LogLevel_CS_LOG_WARNING: CS_LogLevel = 30;
pub const CS_LogLevel_CS_LOG_INFO: CS_LogLevel = 20;
pub const CS_LogLevel_CS_LOG_DEBUG: CS_LogLevel = 10;
pub const CS_LogLevel_CS_LOG_DEBUG1: CS_LogLevel = 9;
pub const CS_LogLevel_CS_LOG_DEBUG2: CS_LogLevel = 8;
pub const CS_LogLevel_CS_LOG_DEBUG3: CS_LogLevel = 7;
pub const CS_LogLevel_CS_LOG_DEBUG4: CS_LogLevel = 6;
#[doc = " Logging levels"]
pub type CS_LogLevel = ::std::os::raw::c_uint;
#[doc = " Video mode"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CS_VideoMode {
    pub pixelFormat: ::std::os::raw::c_int,
    pub width: ::std::os::raw::c_int,
    pub height: ::std::os::raw::c_int,
    pub fps: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_CS_VideoMode() {
    const UNINIT: ::std::mem::MaybeUninit<CS_VideoMode> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<CS_VideoMode>(),
        16usize,
        concat!("Size of: ", stringify!(CS_VideoMode))
    );
    assert_eq!(
        ::std::mem::align_of::<CS_VideoMode>(),
        4usize,
        concat!("Alignment of ", stringify!(CS_VideoMode))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pixelFormat) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CS_VideoMode),
            "::",
            stringify!(pixelFormat)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).width) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(CS_VideoMode),
            "::",
            stringify!(width)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).height) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(CS_VideoMode),
            "::",
            stringify!(height)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fps) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(CS_VideoMode),
            "::",
            stringify!(fps)
        )
    );
}
pub const CS_PropertyKind_CS_PROP_NONE: CS_PropertyKind = 0;
pub const CS_PropertyKind_CS_PROP_BOOLEAN: CS_PropertyKind = 1;
pub const CS_PropertyKind_CS_PROP_INTEGER: CS_PropertyKind = 2;
pub const CS_PropertyKind_CS_PROP_STRING: CS_PropertyKind = 4;
pub const CS_PropertyKind_CS_PROP_ENUM: CS_PropertyKind = 8;
#[doc = " Property kinds"]
pub type CS_PropertyKind = ::std::os::raw::c_uint;
pub const CS_SourceKind_CS_SOURCE_UNKNOWN: CS_SourceKind = 0;
pub const CS_SourceKind_CS_SOURCE_USB: CS_SourceKind = 1;
pub const CS_SourceKind_CS_SOURCE_HTTP: CS_SourceKind = 2;
pub const CS_SourceKind_CS_SOURCE_CV: CS_SourceKind = 4;
pub const CS_SourceKind_CS_SOURCE_RAW: CS_SourceKind = 8;
#[doc = " Source kinds"]
pub type CS_SourceKind = ::std::os::raw::c_uint;
pub const CS_HttpCameraKind_CS_HTTP_UNKNOWN: CS_HttpCameraKind = 0;
pub const CS_HttpCameraKind_CS_HTTP_MJPGSTREAMER: CS_HttpCameraKind = 1;
pub const CS_HttpCameraKind_CS_HTTP_CSCORE: CS_HttpCameraKind = 2;
pub const CS_HttpCameraKind_CS_HTTP_AXIS: CS_HttpCameraKind = 3;
#[doc = " HTTP Camera kinds"]
pub type CS_HttpCameraKind = ::std::os::raw::c_uint;
pub const CS_SinkKind_CS_SINK_UNKNOWN: CS_SinkKind = 0;
pub const CS_SinkKind_CS_SINK_MJPEG: CS_SinkKind = 2;
pub const CS_SinkKind_CS_SINK_CV: CS_SinkKind = 4;
pub const CS_SinkKind_CS_SINK_RAW: CS_SinkKind = 8;
#[doc = " Sink kinds"]
pub type CS_SinkKind = ::std::os::raw::c_uint;
pub const CS_EventKind_CS_SOURCE_CREATED: CS_EventKind = 1;
pub const CS_EventKind_CS_SOURCE_DESTROYED: CS_EventKind = 2;
pub const CS_EventKind_CS_SOURCE_CONNECTED: CS_EventKind = 4;
pub const CS_EventKind_CS_SOURCE_DISCONNECTED: CS_EventKind = 8;
pub const CS_EventKind_CS_SOURCE_VIDEOMODES_UPDATED: CS_EventKind = 16;
pub const CS_EventKind_CS_SOURCE_VIDEOMODE_CHANGED: CS_EventKind = 32;
pub const CS_EventKind_CS_SOURCE_PROPERTY_CREATED: CS_EventKind = 64;
pub const CS_EventKind_CS_SOURCE_PROPERTY_VALUE_UPDATED: CS_EventKind = 128;
pub const CS_EventKind_CS_SOURCE_PROPERTY_CHOICES_UPDATED: CS_EventKind = 256;
pub const CS_EventKind_CS_SINK_SOURCE_CHANGED: CS_EventKind = 512;
pub const CS_EventKind_CS_SINK_CREATED: CS_EventKind = 1024;
pub const CS_EventKind_CS_SINK_DESTROYED: CS_EventKind = 2048;
pub const CS_EventKind_CS_SINK_ENABLED: CS_EventKind = 4096;
pub const CS_EventKind_CS_SINK_DISABLED: CS_EventKind = 8192;
pub const CS_EventKind_CS_NETWORK_INTERFACES_CHANGED: CS_EventKind = 16384;
pub const CS_EventKind_CS_TELEMETRY_UPDATED: CS_EventKind = 32768;
pub const CS_EventKind_CS_SINK_PROPERTY_CREATED: CS_EventKind = 65536;
pub const CS_EventKind_CS_SINK_PROPERTY_VALUE_UPDATED: CS_EventKind = 131072;
pub const CS_EventKind_CS_SINK_PROPERTY_CHOICES_UPDATED: CS_EventKind = 262144;
pub const CS_EventKind_CS_USB_CAMERAS_CHANGED: CS_EventKind = 524288;
#[doc = " Listener event kinds"]
pub type CS_EventKind = ::std::os::raw::c_uint;
pub const CS_TelemetryKind_CS_SOURCE_BYTES_RECEIVED: CS_TelemetryKind = 1;
pub const CS_TelemetryKind_CS_SOURCE_FRAMES_RECEIVED: CS_TelemetryKind = 2;
#[doc = " Telemetry kinds"]
pub type CS_TelemetryKind = ::std::os::raw::c_uint;
#[doc = " Automatically connect or disconnect based on whether any sinks are\n connected to this source.  This is the default behavior."]
pub const CS_ConnectionStrategy_CS_CONNECTION_AUTO_MANAGE: CS_ConnectionStrategy = 0;
#[doc = " Try to keep the connection open regardless of whether any sinks are\n connected."]
pub const CS_ConnectionStrategy_CS_CONNECTION_KEEP_OPEN: CS_ConnectionStrategy = 1;
#[doc = " Never open the connection.  If this is set when the connection is open,\n close the connection."]
pub const CS_ConnectionStrategy_CS_CONNECTION_FORCE_CLOSE: CS_ConnectionStrategy = 2;
#[doc = " Connection strategy"]
pub type CS_ConnectionStrategy = ::std::os::raw::c_uint;
#[doc = " Listener event"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CS_Event {
    pub kind: CS_EventKind,
    pub source: CS_Source,
    pub sink: CS_Sink,
    pub name: *const ::std::os::raw::c_char,
    pub mode: CS_VideoMode,
    pub property: CS_Property,
    pub propertyKind: CS_PropertyKind,
    pub value: ::std::os::raw::c_int,
    pub valueStr: *const ::std::os::raw::c_char,
    pub listener: CS_Listener,
}
#[test]
fn bindgen_test_layout_CS_Event() {
    const UNINIT: ::std::mem::MaybeUninit<CS_Event> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<CS_Event>(),
        52usize,
        concat!("Size of: ", stringify!(CS_Event))
    );
    assert_eq!(
        ::std::mem::align_of::<CS_Event>(),
        4usize,
        concat!("Alignment of ", stringify!(CS_Event))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).kind) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CS_Event),
            "::",
            stringify!(kind)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).source) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(CS_Event),
            "::",
            stringify!(source)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sink) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(CS_Event),
            "::",
            stringify!(sink)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).name) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(CS_Event),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mode) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(CS_Event),
            "::",
            stringify!(mode)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).property) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(CS_Event),
            "::",
            stringify!(property)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).propertyKind) as usize - ptr as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(CS_Event),
            "::",
            stringify!(propertyKind)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).value) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(CS_Event),
            "::",
            stringify!(value)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).valueStr) as usize - ptr as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(CS_Event),
            "::",
            stringify!(valueStr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).listener) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(CS_Event),
            "::",
            stringify!(listener)
        )
    );
}
#[doc = " USB camera information"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CS_UsbCameraInfo {
    pub dev: ::std::os::raw::c_int,
    pub path: *mut ::std::os::raw::c_char,
    pub name: *mut ::std::os::raw::c_char,
    pub otherPathsCount: ::std::os::raw::c_int,
    pub otherPaths: *mut *mut ::std::os::raw::c_char,
    pub vendorId: ::std::os::raw::c_int,
    pub productId: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_CS_UsbCameraInfo() {
    const UNINIT: ::std::mem::MaybeUninit<CS_UsbCameraInfo> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<CS_UsbCameraInfo>(),
        28usize,
        concat!("Size of: ", stringify!(CS_UsbCameraInfo))
    );
    assert_eq!(
        ::std::mem::align_of::<CS_UsbCameraInfo>(),
        4usize,
        concat!("Alignment of ", stringify!(CS_UsbCameraInfo))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dev) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CS_UsbCameraInfo),
            "::",
            stringify!(dev)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).path) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(CS_UsbCameraInfo),
            "::",
            stringify!(path)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).name) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(CS_UsbCameraInfo),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).otherPathsCount) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(CS_UsbCameraInfo),
            "::",
            stringify!(otherPathsCount)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).otherPaths) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(CS_UsbCameraInfo),
            "::",
            stringify!(otherPaths)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).vendorId) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(CS_UsbCameraInfo),
            "::",
            stringify!(vendorId)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).productId) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(CS_UsbCameraInfo),
            "::",
            stringify!(productId)
        )
    );
}
extern "C" {
    #[doc = " @defgroup cscore_property_cfunc Property Functions\n @{"]
    pub fn CS_GetPropertyKind(property: CS_Property, status: *mut CS_Status) -> CS_PropertyKind;
}
extern "C" {
    pub fn CS_GetPropertyName(
        property: CS_Property,
        status: *mut CS_Status,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn CS_GetProperty(property: CS_Property, status: *mut CS_Status) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn CS_SetProperty(
        property: CS_Property,
        value: ::std::os::raw::c_int,
        status: *mut CS_Status,
    );
}
extern "C" {
    pub fn CS_GetPropertyMin(
        property: CS_Property,
        status: *mut CS_Status,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn CS_GetPropertyMax(
        property: CS_Property,
        status: *mut CS_Status,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn CS_GetPropertyStep(
        property: CS_Property,
        status: *mut CS_Status,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn CS_GetPropertyDefault(
        property: CS_Property,
        status: *mut CS_Status,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn CS_GetStringProperty(
        property: CS_Property,
        status: *mut CS_Status,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn CS_SetStringProperty(
        property: CS_Property,
        value: *const ::std::os::raw::c_char,
        status: *mut CS_Status,
    );
}
extern "C" {
    pub fn CS_GetEnumPropertyChoices(
        property: CS_Property,
        count: *mut ::std::os::raw::c_int,
        status: *mut CS_Status,
    ) -> *mut *mut ::std::os::raw::c_char;
}
extern "C" {
    #[doc = " @defgroup cscore_source_create_cfunc Source Creation Functions\n @{"]
    pub fn CS_CreateUsbCameraDev(
        name: *const ::std::os::raw::c_char,
        dev: ::std::os::raw::c_int,
        status: *mut CS_Status,
    ) -> CS_Source;
}
extern "C" {
    pub fn CS_CreateUsbCameraPath(
        name: *const ::std::os::raw::c_char,
        path: *const ::std::os::raw::c_char,
        status: *mut CS_Status,
    ) -> CS_Source;
}
extern "C" {
    pub fn CS_CreateHttpCamera(
        name: *const ::std::os::raw::c_char,
        url: *const ::std::os::raw::c_char,
        kind: CS_HttpCameraKind,
        status: *mut CS_Status,
    ) -> CS_Source;
}
extern "C" {
    pub fn CS_CreateHttpCameraMulti(
        name: *const ::std::os::raw::c_char,
        urls: *mut *const ::std::os::raw::c_char,
        count: ::std::os::raw::c_int,
        kind: CS_HttpCameraKind,
        status: *mut CS_Status,
    ) -> CS_Source;
}
extern "C" {
    pub fn CS_CreateCvSource(
        name: *const ::std::os::raw::c_char,
        mode: *const CS_VideoMode,
        status: *mut CS_Status,
    ) -> CS_Source;
}
extern "C" {
    #[doc = " @defgroup cscore_source_cfunc Source Functions\n @{"]
    pub fn CS_GetSourceKind(source: CS_Source, status: *mut CS_Status) -> CS_SourceKind;
}
extern "C" {
    pub fn CS_GetSourceName(
        source: CS_Source,
        status: *mut CS_Status,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn CS_GetSourceDescription(
        source: CS_Source,
        status: *mut CS_Status,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn CS_GetSourceLastFrameTime(source: CS_Source, status: *mut CS_Status) -> u64;
}
extern "C" {
    pub fn CS_SetSourceConnectionStrategy(
        source: CS_Source,
        strategy: CS_ConnectionStrategy,
        status: *mut CS_Status,
    );
}
extern "C" {
    pub fn CS_IsSourceConnected(source: CS_Source, status: *mut CS_Status) -> CS_Bool;
}
extern "C" {
    pub fn CS_IsSourceEnabled(source: CS_Source, status: *mut CS_Status) -> CS_Bool;
}
extern "C" {
    pub fn CS_GetSourceProperty(
        source: CS_Source,
        name: *const ::std::os::raw::c_char,
        status: *mut CS_Status,
    ) -> CS_Property;
}
extern "C" {
    pub fn CS_EnumerateSourceProperties(
        source: CS_Source,
        count: *mut ::std::os::raw::c_int,
        status: *mut CS_Status,
    ) -> *mut CS_Property;
}
extern "C" {
    pub fn CS_GetSourceVideoMode(
        source: CS_Source,
        mode: *mut CS_VideoMode,
        status: *mut CS_Status,
    );
}
extern "C" {
    pub fn CS_SetSourceVideoMode(
        source: CS_Source,
        mode: *const CS_VideoMode,
        status: *mut CS_Status,
    ) -> CS_Bool;
}
extern "C" {
    pub fn CS_SetSourceVideoModeDiscrete(
        source: CS_Source,
        pixelFormat: WPI_PixelFormat,
        width: ::std::os::raw::c_int,
        height: ::std::os::raw::c_int,
        fps: ::std::os::raw::c_int,
        status: *mut CS_Status,
    ) -> CS_Bool;
}
extern "C" {
    pub fn CS_SetSourcePixelFormat(
        source: CS_Source,
        pixelFormat: WPI_PixelFormat,
        status: *mut CS_Status,
    ) -> CS_Bool;
}
extern "C" {
    pub fn CS_SetSourceResolution(
        source: CS_Source,
        width: ::std::os::raw::c_int,
        height: ::std::os::raw::c_int,
        status: *mut CS_Status,
    ) -> CS_Bool;
}
extern "C" {
    pub fn CS_SetSourceFPS(
        source: CS_Source,
        fps: ::std::os::raw::c_int,
        status: *mut CS_Status,
    ) -> CS_Bool;
}
extern "C" {
    pub fn CS_SetSourceConfigJson(
        source: CS_Source,
        config: *const ::std::os::raw::c_char,
        status: *mut CS_Status,
    ) -> CS_Bool;
}
extern "C" {
    pub fn CS_GetSourceConfigJson(
        source: CS_Source,
        status: *mut CS_Status,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn CS_EnumerateSourceVideoModes(
        source: CS_Source,
        count: *mut ::std::os::raw::c_int,
        status: *mut CS_Status,
    ) -> *mut CS_VideoMode;
}
extern "C" {
    pub fn CS_EnumerateSourceSinks(
        source: CS_Source,
        count: *mut ::std::os::raw::c_int,
        status: *mut CS_Status,
    ) -> *mut CS_Sink;
}
extern "C" {
    pub fn CS_CopySource(source: CS_Source, status: *mut CS_Status) -> CS_Source;
}
extern "C" {
    pub fn CS_ReleaseSource(source: CS_Source, status: *mut CS_Status);
}
extern "C" {
    #[doc = " @defgroup cscore_source_prop_cfunc Camera Source Common Property Functions\n @{"]
    pub fn CS_SetCameraBrightness(
        source: CS_Source,
        brightness: ::std::os::raw::c_int,
        status: *mut CS_Status,
    );
}
extern "C" {
    pub fn CS_GetCameraBrightness(
        source: CS_Source,
        status: *mut CS_Status,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn CS_SetCameraWhiteBalanceAuto(source: CS_Source, status: *mut CS_Status);
}
extern "C" {
    pub fn CS_SetCameraWhiteBalanceHoldCurrent(source: CS_Source, status: *mut CS_Status);
}
extern "C" {
    pub fn CS_SetCameraWhiteBalanceManual(
        source: CS_Source,
        value: ::std::os::raw::c_int,
        status: *mut CS_Status,
    );
}
extern "C" {
    pub fn CS_SetCameraExposureAuto(source: CS_Source, status: *mut CS_Status);
}
extern "C" {
    pub fn CS_SetCameraExposureHoldCurrent(source: CS_Source, status: *mut CS_Status);
}
extern "C" {
    pub fn CS_SetCameraExposureManual(
        source: CS_Source,
        value: ::std::os::raw::c_int,
        status: *mut CS_Status,
    );
}
extern "C" {
    #[doc = " @defgroup cscore_usbcamera_cfunc UsbCamera Source Functions\n @{"]
    pub fn CS_SetUsbCameraPath(
        source: CS_Source,
        path: *const ::std::os::raw::c_char,
        status: *mut CS_Status,
    );
}
extern "C" {
    pub fn CS_GetUsbCameraPath(
        source: CS_Source,
        status: *mut CS_Status,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn CS_GetUsbCameraInfo(source: CS_Source, status: *mut CS_Status) -> *mut CS_UsbCameraInfo;
}
extern "C" {
    #[doc = " @defgroup cscore_httpcamera_cfunc HttpCamera Source Functions\n @{"]
    pub fn CS_GetHttpCameraKind(source: CS_Source, status: *mut CS_Status) -> CS_HttpCameraKind;
}
extern "C" {
    pub fn CS_SetHttpCameraUrls(
        source: CS_Source,
        urls: *mut *const ::std::os::raw::c_char,
        count: ::std::os::raw::c_int,
        status: *mut CS_Status,
    );
}
extern "C" {
    pub fn CS_GetHttpCameraUrls(
        source: CS_Source,
        count: *mut ::std::os::raw::c_int,
        status: *mut CS_Status,
    ) -> *mut *mut ::std::os::raw::c_char;
}
extern "C" {
    #[doc = " @defgroup cscore_opencv_source_cfunc OpenCV Source Functions\n @{"]
    pub fn CS_NotifySourceError(
        source: CS_Source,
        msg: *const ::std::os::raw::c_char,
        status: *mut CS_Status,
    );
}
extern "C" {
    pub fn CS_SetSourceConnected(source: CS_Source, connected: CS_Bool, status: *mut CS_Status);
}
extern "C" {
    pub fn CS_SetSourceDescription(
        source: CS_Source,
        description: *const ::std::os::raw::c_char,
        status: *mut CS_Status,
    );
}
extern "C" {
    pub fn CS_CreateSourceProperty(
        source: CS_Source,
        name: *const ::std::os::raw::c_char,
        kind: CS_PropertyKind,
        minimum: ::std::os::raw::c_int,
        maximum: ::std::os::raw::c_int,
        step: ::std::os::raw::c_int,
        defaultValue: ::std::os::raw::c_int,
        value: ::std::os::raw::c_int,
        status: *mut CS_Status,
    ) -> CS_Property;
}
extern "C" {
    pub fn CS_SetSourceEnumPropertyChoices(
        source: CS_Source,
        property: CS_Property,
        choices: *mut *const ::std::os::raw::c_char,
        count: ::std::os::raw::c_int,
        status: *mut CS_Status,
    );
}
extern "C" {
    #[doc = " @defgroup cscore_sink_create_cfunc Sink Creation Functions\n @{"]
    pub fn CS_CreateMjpegServer(
        name: *const ::std::os::raw::c_char,
        listenAddress: *const ::std::os::raw::c_char,
        port: ::std::os::raw::c_int,
        status: *mut CS_Status,
    ) -> CS_Sink;
}
extern "C" {
    pub fn CS_CreateCvSink(
        name: *const ::std::os::raw::c_char,
        pixelFormat: WPI_PixelFormat,
        status: *mut CS_Status,
    ) -> CS_Sink;
}
extern "C" {
    pub fn CS_CreateCvSinkCallback(
        name: *const ::std::os::raw::c_char,
        pixelFormat: WPI_PixelFormat,
        data: *mut ::std::os::raw::c_void,
        processFrame: ::std::option::Option<
            unsafe extern "C" fn(data: *mut ::std::os::raw::c_void, time: u64),
        >,
        status: *mut CS_Status,
    ) -> CS_Sink;
}
extern "C" {
    #[doc = " @defgroup cscore_sink_cfunc Sink Functions\n @{"]
    pub fn CS_GetSinkKind(sink: CS_Sink, status: *mut CS_Status) -> CS_SinkKind;
}
extern "C" {
    pub fn CS_GetSinkName(sink: CS_Sink, status: *mut CS_Status) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn CS_GetSinkDescription(
        sink: CS_Sink,
        status: *mut CS_Status,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn CS_GetSinkProperty(
        sink: CS_Sink,
        name: *const ::std::os::raw::c_char,
        status: *mut CS_Status,
    ) -> CS_Property;
}
extern "C" {
    pub fn CS_EnumerateSinkProperties(
        sink: CS_Sink,
        count: *mut ::std::os::raw::c_int,
        status: *mut CS_Status,
    ) -> *mut CS_Property;
}
extern "C" {
    pub fn CS_SetSinkSource(sink: CS_Sink, source: CS_Source, status: *mut CS_Status);
}
extern "C" {
    pub fn CS_GetSinkSourceProperty(
        sink: CS_Sink,
        name: *const ::std::os::raw::c_char,
        status: *mut CS_Status,
    ) -> CS_Property;
}
extern "C" {
    pub fn CS_SetSinkConfigJson(
        sink: CS_Sink,
        config: *const ::std::os::raw::c_char,
        status: *mut CS_Status,
    ) -> CS_Bool;
}
extern "C" {
    pub fn CS_GetSinkConfigJson(
        sink: CS_Sink,
        status: *mut CS_Status,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn CS_GetSinkSource(sink: CS_Sink, status: *mut CS_Status) -> CS_Source;
}
extern "C" {
    pub fn CS_CopySink(sink: CS_Sink, status: *mut CS_Status) -> CS_Sink;
}
extern "C" {
    pub fn CS_ReleaseSink(sink: CS_Sink, status: *mut CS_Status);
}
extern "C" {
    #[doc = " @defgroup cscore_mjpegserver_cfunc MjpegServer Sink Functions\n @{"]
    pub fn CS_GetMjpegServerListenAddress(
        sink: CS_Sink,
        status: *mut CS_Status,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn CS_GetMjpegServerPort(sink: CS_Sink, status: *mut CS_Status) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " @defgroup cscore_opencv_sink_cfunc OpenCV Sink Functions\n @{"]
    pub fn CS_SetSinkDescription(
        sink: CS_Sink,
        description: *const ::std::os::raw::c_char,
        status: *mut CS_Status,
    );
}
extern "C" {
    pub fn CS_GetSinkError(sink: CS_Sink, status: *mut CS_Status) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn CS_SetSinkEnabled(sink: CS_Sink, enabled: CS_Bool, status: *mut CS_Status);
}
extern "C" {
    #[doc = " @defgroup cscore_listener_cfunc Listener Functions\n @{"]
    pub fn CS_SetListenerOnStart(
        onStart: ::std::option::Option<unsafe extern "C" fn(data: *mut ::std::os::raw::c_void)>,
        data: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn CS_SetListenerOnExit(
        onExit: ::std::option::Option<unsafe extern "C" fn(data: *mut ::std::os::raw::c_void)>,
        data: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn CS_AddListener(
        data: *mut ::std::os::raw::c_void,
        callback: ::std::option::Option<
            unsafe extern "C" fn(data: *mut ::std::os::raw::c_void, event: *const CS_Event),
        >,
        eventMask: ::std::os::raw::c_int,
        immediateNotify: CS_Bool,
        status: *mut CS_Status,
    ) -> CS_Listener;
}
extern "C" {
    pub fn CS_RemoveListener(handle: CS_Listener, status: *mut CS_Status);
}
extern "C" {
    pub fn CS_CreateListenerPoller() -> CS_ListenerPoller;
}
extern "C" {
    pub fn CS_DestroyListenerPoller(poller: CS_ListenerPoller);
}
extern "C" {
    pub fn CS_AddPolledListener(
        poller: CS_ListenerPoller,
        eventMask: ::std::os::raw::c_int,
        immediateNotify: CS_Bool,
        status: *mut CS_Status,
    ) -> CS_Listener;
}
extern "C" {
    pub fn CS_PollListener(
        poller: CS_ListenerPoller,
        count: *mut ::std::os::raw::c_int,
    ) -> *mut CS_Event;
}
extern "C" {
    pub fn CS_PollListenerTimeout(
        poller: CS_ListenerPoller,
        count: *mut ::std::os::raw::c_int,
        timeout: f64,
        timedOut: *mut CS_Bool,
    ) -> *mut CS_Event;
}
extern "C" {
    pub fn CS_FreeEvents(arr: *mut CS_Event, count: ::std::os::raw::c_int);
}
extern "C" {
    pub fn CS_CancelPollListener(poller: CS_ListenerPoller);
}
extern "C" {
    #[doc = " @}"]
    pub fn CS_NotifierDestroyed() -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " @defgroup cscore_telemetry_cfunc Telemetry Functions\n @{"]
    pub fn CS_SetTelemetryPeriod(seconds: f64);
}
extern "C" {
    pub fn CS_GetTelemetryElapsedTime() -> f64;
}
extern "C" {
    pub fn CS_GetTelemetryValue(
        handle: CS_Handle,
        kind: CS_TelemetryKind,
        status: *mut CS_Status,
    ) -> i64;
}
extern "C" {
    pub fn CS_GetTelemetryAverageValue(
        handle: CS_Handle,
        kind: CS_TelemetryKind,
        status: *mut CS_Status,
    ) -> f64;
}
#[doc = " @defgroup cscore_logging_cfunc Logging Functions\n @{"]
pub type CS_LogFunc = ::std::option::Option<
    unsafe extern "C" fn(
        level: ::std::os::raw::c_uint,
        file: *const ::std::os::raw::c_char,
        line: ::std::os::raw::c_uint,
        msg: *const ::std::os::raw::c_char,
    ),
>;
extern "C" {
    pub fn CS_SetLogger(func: CS_LogFunc, min_level: ::std::os::raw::c_uint);
}
extern "C" {
    pub fn CS_SetDefaultLogger(min_level: ::std::os::raw::c_uint);
}
extern "C" {
    #[doc = " @defgroup cscore_shutdown_cfunc Library Shutdown Function\n @{"]
    pub fn CS_Shutdown();
}
extern "C" {
    #[doc = " @defgroup cscore_utility_cfunc Utility Functions\n @{"]
    pub fn CS_EnumerateUsbCameras(
        count: *mut ::std::os::raw::c_int,
        status: *mut CS_Status,
    ) -> *mut CS_UsbCameraInfo;
}
extern "C" {
    pub fn CS_FreeEnumeratedUsbCameras(
        cameras: *mut CS_UsbCameraInfo,
        count: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn CS_EnumerateSources(
        count: *mut ::std::os::raw::c_int,
        status: *mut CS_Status,
    ) -> *mut CS_Source;
}
extern "C" {
    pub fn CS_ReleaseEnumeratedSources(sources: *mut CS_Source, count: ::std::os::raw::c_int);
}
extern "C" {
    pub fn CS_EnumerateSinks(
        count: *mut ::std::os::raw::c_int,
        status: *mut CS_Status,
    ) -> *mut CS_Sink;
}
extern "C" {
    pub fn CS_ReleaseEnumeratedSinks(sinks: *mut CS_Sink, count: ::std::os::raw::c_int);
}
extern "C" {
    pub fn CS_FreeString(str_: *mut ::std::os::raw::c_char);
}
extern "C" {
    pub fn CS_FreeEnumPropertyChoices(
        choices: *mut *mut ::std::os::raw::c_char,
        count: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn CS_FreeUsbCameraInfo(info: *mut CS_UsbCameraInfo);
}
extern "C" {
    pub fn CS_FreeHttpCameraUrls(
        urls: *mut *mut ::std::os::raw::c_char,
        count: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn CS_FreeEnumeratedProperties(properties: *mut CS_Property, count: ::std::os::raw::c_int);
}
extern "C" {
    pub fn CS_FreeEnumeratedVideoModes(modes: *mut CS_VideoMode, count: ::std::os::raw::c_int);
}
extern "C" {
    pub fn CS_GetHostname() -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn CS_GetNetworkInterfaces(
        count: *mut ::std::os::raw::c_int,
    ) -> *mut *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn CS_FreeNetworkInterfaces(
        interfaces: *mut *mut ::std::os::raw::c_char,
        count: ::std::os::raw::c_int,
    );
}
